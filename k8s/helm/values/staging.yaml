replicaCount: 1

# vaultSecretStoreName is the name of the ClusterSecretStore resource to pull secret credentials
vaultSecretStoreName: "rcsb-vault"

image:
  repository: "harbor.devops.k8s.rcsb.org/rcsb/rcsb-chemsearch"
  pullPolicy: IfNotPresent
  tag: "staging"

initialDelaySeconds: 300
imagePullSecrets: "harbor-docker-registry-conf"

deploymentStrategy:
  #https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  #Type is either RollingUpdate or Recreate
  type: "RollingUpdate"
  #For rolling update, what percentage of total pods can be created above desired amount
  maxSurge: 25%
  #For rolling update, what percentage of total pods can be brought down to update
  maxUnavailable: 25%

#podEnvVars:
#  - name: NODE_ENV
#    value: production
#  - name: SIERRA_CONFIG
#    value: /etc/chemsearch/chemsearch-base.app.json,/etc/chemsearch/chemsearch.app.json

podSecurityContext:
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: true
  className: "haproxy"
  annotations:
    cert-manager.io/cluster-issuer: rutgers-acme
    kubernetes.io/tls-acme: "true"
  hosts:
    - host: chemsearch.staging.k8s.rcsb.org
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - hosts:
        - chemsearch.staging.k8s.rcsb.org
      secretName: chemsearch.staging.k8s.rcsb.org-tls

resources:
  limits:
    cpu: 256m
    memory: 8Gi
  requests:
    cpu: 4m
    memory: 1Gi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 20
  targetCPUUtilizationPercentage: 80

# externalSecret defines values for the ExternalSecret resource if your application needs to pull values
# from an external Vault service.
# TODO: Review externalSecret values as required.
externalSecret:
  enabled: true
  secretStoreRefName: "rcsb-vault"
  targets:
    - secretName: oe-license-file
      data:
        - secretKey: oe-license.txt
          remoteRef:
            key: openeye/license
            property: license
      #  - secretKey: key_name_to_create_in_Secret_k8s_resource
      #    remoteRef:
      #      key: vault_engine_name/secret_name
      #      property: name_of_key_of_secret_in_vault

# useSecretsVolume if your application will mount a secret from the Vault service as a file on the filesystem.
useSecretsVolume: true
secretVolumes:
  - name: oe-license
    mountPath: /home/ubuntu/.secrets
    filename: oe-license.txt
    secretName: oe-license-file
#  - name: Name of the volume reference in the Deployment resource
#    mountPath: Full path in the container to mount the secret file
#    filename: The filename of the secret file to mount
#    secretName: Name of the Secret resource in K8s

# appConfigs defines ConfigMap resources which are mounted into the container environment as a file.
useAppConfigs: false
appConfigs: {}
  #  example.log4j.xml:
  #    mountPath: Full path in the container to mount this config file
  #    filename: The filename of the config file to mount
  #    value: |-
  #      <example>
  #        Can be any other file types besides xml as well!
#      </example>

podEnvVars:
  - name: CHEM_SEARCH_DATA_HOSTNAME
    value: bl-west.rcsb.org
  - name: CHEM_SEARCH_DATA_PATH
    value: 4-coastal
  - name: CHEM_SEARCH_UPDATE_CHANNEL
    value: a
  - name: OE_LICENSE
    value: /home/ubuntu/oe-license/oe-license.txt
